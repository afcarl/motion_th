function [stim, scan, display] = initReadingParams(expNum);if ~exist('expNum', 'var')	expNum = 0;	disp('No experiment number specified- doing default of 1.');enddisplay = usePredefinedDisplay;% SCAN PARAMS %% Parameters relevant to entire scanscan.numEpochs = 2;scan.ncycles = 6;scan.period = 36;scan.scanDuration = scan.period * scan.ncycles;scan.prescanDuration = 6;% set params that are probably are common to all expsstim.text.size = 24;stim.text.font = 'Courier';stim.text.position = [0 0];  % vert, horiz- offsets from center in degstim.imageSize = [2 4];  % vert, horiz: size (in deg) of entire stim rect (will be centered)switch expNum	case 0,		disp(['Experiment ' num2str(expNum) ': Single word practice.']);		scan.dispString = 'Single word reading: Is it an animal?';		scan.feedbackStrings = {'Correct', 'Incorrect', '?', '-'};		chdir('singleWord');		disp('Loading text...');		[stim.text.strings, stim.text.types] = loadTextFile('textItemsC');		disp('Loading sound files...');		[stim.snd.sounds, stim.snd.sampRate, stim.snd.types] = loadSoundFile('soundItemsC', 'sounds');		stim.duration = 0.5;				% Stimulus duration (in seconds)		scan.trialDuration = 3;		scan.responseDuration = 1.5;		%seconds		chdir('..');		case 1,		disp(['Experiment ' num2str(expNum) ': Single word reading (AB).']);		scan.dispString = 'Single word reading (AB): Is it an animal?';		scan.feedbackStrings = {' ', ' ', '?', '-'};	% no feedback		chdir('singleWord');		disp('Loading text...');		[stim.text.strings, stim.text.types] = loadTextFile('textItemsA');		disp('Loading sound files...');		[stim.snd.sounds, stim.snd.sampRate, stim.snd.types] = loadSoundFile('soundItemsB', 'sounds');		stim.duration = 0.5;				% Stimulus duration (in seconds)		scan.trialDuration = 3;		scan.responseDuration = 1.5;		%seconds		chdir('..');		case 2,		disp(['Experiment ' num2str(expNum) ': Single word reading (BA).']);		scan.dispString = 'Single word reading (BA): Is it an animal?';		scan.feedbackStrings = {' ', ' ', '?', '-'};	% no feedback		chdir('singleWord');		disp('Loading text...');		[stim.text.strings, stim.text.types] = loadTextFile('textItemsB');		disp('Loading sound files...');		[stim.snd.sounds, stim.snd.sampRate, stim.snd.types] = loadSoundFile('soundItemsA', 'sounds');		stim.duration = 0.5;				% Stimulus duration (in seconds)		scan.trialDuration = 3;		scan.responseDuration = 1.5;		%seconds		chdir('..');	case 3,		disp(['Experiment ' num2str(expNum) ': Sentence reading.']);		scan.dispString = 'Sentence reading: Is it true?';		scan.feedbackStrings = {' ', ' ', '?', '-'};	% no feedback		chdir('sentence');		disp('Loading text...');		[stim.text.strings, stim.text.types] = loadTextFile('textItems');		stim.imageSize = [4 8];						disp('Loading sound files...');		[stim.snd.sounds, stim.snd.sampRate, stim.snd.types] = loadSoundFile('soundItems', 'sounds');		stim.duration = 2.0;				% Stimulus duration (in seconds)		scan.trialDuration = 4.5;		scan.responseDuration = 2.0;		%seconds		chdir('..');		case 4,		disp(['Experiment ' num2str(expNum) ': Paragraph reading.']);		scan.dispString = 'Paragraph reading.';		scan.feedbackStrings = {' ', ' ', ' ', ' '};	% no feedback		chdir('paragraph');		disp('Loading text...');		[stim.text.strings, stim.text.types] = loadTextFile('textItems');		stim.imageSize = [8 8];						stim.snd.sounds = cell(length(stim.text.strings),1);		stim.snd.sampRate = [];		stim.snd.types = [];;		stim.duration = 7.0;				% Stimulus duration (in seconds)		scan.trialDuration = 9;		scan.responseDuration = 2;		%seconds		chdir('..');		otherwise,		error(['Experiment # ' num2str(expNum) ' is not configured!']);end	% Color infostim.stimLMS.dir = [1 1 1]';stim.stimLMS.scale = -1;stim.backRGB.dir = [1 1 1]';stim.backRGB.scale = 0.5;stim.stimRGB = cone2rgb(display, stim.stimLMS, stim.backRGB);% Fixation parametersstim.fix.colors = [1 2]; 		% Reserved colors in cmapstim.fix.size = 0.25;				% Degreesstim.fix.position = [0 0];% convert some unitsstim.text.positionPix = round(stim.text.position./display.pixelSize);stim.imagePix = round(stim.imageSize./display.pixelSize);stim.frames = round(display.frameRate * stim.duration);scan.numTrialsPerEpoch = scan.period/scan.numEpochs/scan.trialDuration;if round(scan.numTrialsPerEpoch) ~= scan.numTrialsPerEpoch    error('SCAN PARAM ERROR: period/numEpochs is not an integer multiple of trialDuration!');end