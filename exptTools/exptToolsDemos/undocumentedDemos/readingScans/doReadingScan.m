% doReadingScan% % AUTHOR:  dougherty% DATE:    98/12/14% PURPOSE:% % clear all;runPriority = 0;	% 0 for debugging and setting up, 7 for scanningexperimentNum = 0;% 0 = practice% 1 = single word (AB)% 2 = single word (BA)% 3 = sentence (A)% 4 = paragraph (A)invertImgFlag = 0;chdir([machineName,':Users:bob:reading']);addpath([machineName,':Users:bob:reading']);%%% Get parameters %%%[stim, scan, display] = initReadingParams(experimentNum);% the following will produce jpeg images of the stimuli%stim.saveImageDir = 'stimImages';%%% Open the screen %%%display = openScreen(display);%%% Create stimuli %%%% Create colormapsdisp('Creating colormaps and images...');minCmapVal = max([display.reservedColor(:).fbVal])+1;maxCmapVal = display.numColors-1;midCmapVal = ceil((maxCmapVal-minCmapVal+1)/2 + minCmapVal);cmapIndex = minCmapVal:maxCmapVal;backColorIndex = minCmapVal;foreColorIndex = minCmapVal+1;numCmaps = 2;cmap = zeros(display.numColors,3,numCmaps);% I noticed some odd behavior- stim.stimRGB.dir includes values that aren't% quite what they seem (e.g., 1 - (1.0e-13 * -0.8527) instead of 1)- this% screws up 'floor', so I'm specifying the precision before rounding.stim.stimRGB.dir = round(stim.stimRGB.dir*1e6)/1e6; % limit to six significant digitsstim.backRGB.dir = round(stim.backRGB.dir*1e6)/1e6;% make first cmap blankcmap(:,:,1) = floor((stim.backRGB.scale * ones(display.numColors,3) * ...                    diag(stim.backRGB.dir./max(abs(stim.backRGB.dir)))) * display.maxGunVal);% fill second cmap with background first...cmap(:,:,2) = cmap(:,:,1);% then poke in the stimulus colorcmap(foreColorIndex+1:display.numColors,:,2) = floor((stim.stimRGB.scale * ...                    ones(display.numColors-foreColorIndex,3) * ...					diag(stim.stimRGB.dir./max(abs(stim.stimRGB.dir)))) * ...                    display.maxGunVal + display.maxGunVal/2);cmap = insertReservedCols(display,cmap);SCREEN(display.windowPtr,'SetClut',cmap(:,:,2));%img = ones([stim.imagePix, 2])*midCmapVal;blankImg = ones([stim.imagePix, 1])*backColorIndex;blankImg = insertFixation(display, blankImg, stim.fix);% Create the sequence% the first cmap is blank, allowing us to draw invisibly.% the second image is blank, so it will erase the first.seq = [-1 1 -2*ones(1,stim.frames) -1 2];feedback2use = standardFeedback(display, scan.feedbackStrings);numType1Items = length(stim.text.strings);disp('Creating type 1 trials...');imWide = size(blankImg,2);imHigh = size(blankImg,1);img = zeros(imHigh, imWide, 2);for trialNum=1:numType1Items        % Draw text into a matrix (background will be 0, text will be 255)	if (experimentNum < 3)		textImg = DrawTextLine2Bitmap(stim.text.strings{trialNum}, ...						stim.text.size, stim.text.font);	else		textImg = DrawText2Bitmap(stim.text.strings{trialNum}, ...						[0 0 stim.imagePix], stim.text.size, stim.text.font);	end								% set the text color properly (change 255 into foreColorIndex & 0 into backColorIndex)	textImg = textImg/255 * (foreColorIndex-backColorIndex) + backColorIndex;	if invertImgFlag		textImg = flipud(textImg);	end    % position text as an offset from the center	textWide = size(textImg,2);	textHigh = size(textImg,1);	if (textWide > imWide)		disp('WARNING! Text image wants to be wider than the alotted image width!');		textWide = imWide;	end	if (textHigh > imHigh)		disp('WARNING! Text image wants to be higher than the alotted image height!');		textHigh = imHigh;	end		    x = round(imWide/2-textWide/2) + stim.text.positionPix(2) + 1;    y = round(imHigh/2-textHigh/2) + stim.text.positionPix(1) + 1;	img(:,:,1) = blankImg;	img(:,:,2) = blankImg;%	img(y:y+textHigh-1, x:x+textWide-1, 1) = img(y:y+textHigh-1, x:x+textWide-1) + textImg;	img(y:y+textHigh-1, x:x+textWide-1, 1) = textImg(1:textHigh, 1:textWide);        %%% Create trials %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    %																	%																	%    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    	if isfield(stim, 'saveImageDir')    	disp(['saving stimuli as images to ' pwd stim.saveImageDir]);		saveImages(stim.saveImageDir, ['img' num2str(trialNum, '%02d') '_'], ...					img(:,:,1), cmap);    end	stimulus = createStimulusStruct(img, cmap, seq);    stimulus = createImagePointers(display, stimulus);    if str2num(stim.text.types{trialNum}) == 1        responseSet = '12';    else        responseSet = '21';    end    trials{trialNum} = addTrialEvent(display,[],'stimulusEvent', 'stimulus',stimulus);    trials{trialNum} = addTrialEvent(display,trials{trialNum},'responseEvent',...    				'duration', scan.responseDuration, 'answerType', 'binary', ...    				'responseSet', responseSet);    trials{trialNum} = addTrialEvent(display,trials{trialNum},'feedbackEvent',feedback2use);				end% Create type 2 trials% create a simple visual stimulus with just a fixationdisp('Creating type 2 trials...');seq = [-1 1];stimulus = createStimulusStruct(blankImg, cmap(:,:,1), seq);stimulus = createImagePointers(display, stimulus);numType2Items = length(stim.snd.sounds);for trialNum=numType1Items+1:numType1Items+numType2Items    % Create trials    trials{trialNum} = addTrialEvent(display,[],'stimulusEvent', 'stimulus',stimulus);	if ~isempty(stim.snd.sounds{trialNum-numType1Items})	    if str2num(stim.snd.types{trialNum-numType1Items}) == 1	        responseSet = '12';	    else	        responseSet = '21';	    end	    trials{trialNum} = addTrialEvent(display,trials{trialNum},'soundEvent', ...	                    'sound', stim.snd.sounds{trialNum-numType1Items}, ...	                    'sampRate', stim.snd.sampRate);	    trials{trialNum} = addTrialEvent(display,trials{trialNum},'responseEvent',...	    				'duration', scan.responseDuration, 'answerType', 'binary', ...	    				'responseSet', responseSet);	    trials{trialNum} = addTrialEvent(display,trials{trialNum},'feedbackEvent',feedback2use);	endend% Create scan structuredisp('Creating scan structure...');doScanStruct.trials = trials;doScanStruct.trialDuration = scan.trialDuration;doScanStruct.prescanDuration = scan.prescanDuration;doScanStruct.prescanStimulus = stimulus;	% simple stim w/ just fixationtrialSeq{1} = [];trialSeq{2} = [];for i=1:ceil(scan.numTrialsPerEpoch/numType1Items*scan.ncycles)    trialSeq{1} = [trialSeq{1} shuffle([1:numType1Items])];endfor i=1:ceil(scan.numTrialsPerEpoch/numType2Items*scan.ncycles)    trialSeq{2} = [trialSeq{2} shuffle([numType1Items+1:numType1Items+numType2Items])];enddoScanStruct.trialSequence = [];for i=1:scan.ncycles    doScanStruct.trialSequence = [doScanStruct.trialSequence ...         trialSeq{1}((i-1)*scan.numTrialsPerEpoch+1:i*scan.numTrialsPerEpoch) ...        trialSeq{2}((i-1)*scan.numTrialsPerEpoch+1:i*scan.numTrialsPerEpoch)];end        doScanStruct.dispString = scan.dispString;% Start the scan%disp('Read to start scan.');response = doScan(display,doScanStruct,runPriority,1);disp(['Stimulus time should have been ' num2str(scan.scanDuration+scan.prescanDuration) '.']);% write out behavioural data trialMask{1} = find(doScanStruct.trialSequence <= numType1Items);trialMask{2} = find(doScanStruct.trialSequence > numType1Items);fp = fopen('log', 'at');fprintf(fp, '****\n%s\n', datestr(now,0));for i=1:2	numMissed(i) = sum(isnan(response(trialMask{i})));	validResp = response(trialMask{i});	validResp = validResp(find(~isnan(validResp)));	pc(i) = sum(validResp)/length(validResp);	perf = ['proportion correct = ' num2str(pc(i)) ' ('num2str(numMissed(i)) ' missed trials)'];	disp(perf);	fprintf(fp, 'type %d trials: %s\n', i, perf);end% write out the order of the text itemsfor i=trialSeq{1}	fprintf(fp, '%s\t%d\n', stim.text.strings{i}, response(trialMask{1}(i)));endfclose(fp);% Close the one on-screen and many off-screen windows%SCREEN('CloseAll');