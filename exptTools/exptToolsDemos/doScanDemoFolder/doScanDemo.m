% doScanDemo% % AUTHOR:  Backus and Press% DATE:    04.23.98, 5.25.98% PURPOSE:%   Create a pair of images (right and left eye) for doing a% binocular color experiment.  The images in the two eyes will% have the same spatial and temporal frequencies.  But, they can% have different colors.% % clear all;runPriority = 0;	% 0 for debugging and setting up, 7 for scanningchdir([machineName,':Applications:MATLAB 5.2:Toolbox:exptTools:exptToolsDemos:doScanDemoFolder:']);displayParams = usePredefinedDisplay;% Get parameters[stimParams,scanParams] = initParams;%%% Create stimuli %%%% Create stimulus 1 - inward motioncmap = generateColormaps (displayParams, stimParams);img = generateImages (displayParams, stimParams);img = insertFixation(displayParams, img, stimParams.fix);seq = generateSequence (displayParams, stimParams);stimulus1 = createStimulusStruct(img,cmap,seq);% Create stimulus 2 - outward motionstimParams.temporalFrequency = -stimParams.temporalFrequency;cmap = generateColormaps (displayParams, stimParams);img = generateImages (displayParams, stimParams);img = insertFixation(displayParams, img, stimParams.fix);seq = generateSequence (displayParams, stimParams);stimulus2 = createStimulusStruct(img,cmap,seq);% Create blank stimulus (with fixation) for both ISI and response periodsstimParams.stimulusType = 'blank';cmap = generateColormaps (displayParams, stimParams);seq = -1;blankStimulus = createStimulusStruct(img,cmap,seq);%%% Open the screen %%% display = openScreen(displayParams);% Create image pointers - openScreen must be called beforehand (to create windowPtr)stimulus1 = createImagePointers(display, stimulus1);stimulus2 = createImagePointers(display, stimulus2);blankStimulus = createImagePointers(display, blankStimulus);%%% Create trials %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%																	%% The task is a same/different task of direction of motion for		%% two sequentially presented stimuli.  There are therefore four		%% trial types, two of which are match (correct response = '1'),		%% two of which are nonmatch (correct response = '2').  The first	%% key (character) in responseSet is considered the correct response	%% (thus '1' is first for the match trials, '2' is first for the		%% nonmatch trials).  We could have used 'mn' (or 'nm') instead of	%% '12' (or '21').													%%																	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%feedback2use = standardYNfeedback(display);% Match - both stimulus1trials{1} = addTrialEvent(display,[],'stimulusEvent',...				'stimulus',stimulus1);trials{1} = addTrialEvent(display,trials{1},'ISIEvent',...				'stimulus',blankStimulus, ...				'duration', scanParams.ISIDuration);trials{1} = addTrialEvent(display,trials{1},'stimulusEvent',...				'stimulus',stimulus1);trials{1} = addTrialEvent(display,trials{1},'responseEvent',...				'stimulus',blankStimulus, ...				'duration', scanParams.responseDuration, ...				'answerType', 'binary', ... % optional ('binary' is default)				'responseSet', '12');trials{1} = addTrialEvent(display,trials{1},'feedbackEvent',feedback2use);				% Match - both stimulus2trials{2} = addTrialEvent(display,[],'stimulusEvent',...				'stimulus',stimulus2);trials{2} = addTrialEvent(display,trials{2},'ISIEvent',...				'stimulus',blankStimulus, ...				'duration', scanParams.ISIDuration);trials{2} = addTrialEvent(display,trials{2},'stimulusEvent',...				'stimulus',stimulus2);trials{2} = addTrialEvent(display,trials{2},'responseEvent',...				'stimulus',blankStimulus, ...				'duration', scanParams.responseDuration, ...				'answerType', 'binary', ...				'responseSet', '12');trials{2} = addTrialEvent(display,trials{2},'feedbackEvent',feedback2use);				% Nonmatch - stimulus1 then 2trials{3} = addTrialEvent(display,[],'stimulusEvent',...				'stimulus',stimulus1);trials{3} = addTrialEvent(display,trials{3},'ISIEvent',...				'stimulus',blankStimulus, ...				'duration', scanParams.ISIDuration);trials{3} = addTrialEvent(display,trials{3},'stimulusEvent',...				'stimulus',stimulus2);trials{3} = addTrialEvent(display,trials{3},'responseEvent',...				'stimulus',blankStimulus, ...				'duration', scanParams.responseDuration, ...				'answerType', 'binary', ...				'responseSet', '21');trials{3} = addTrialEvent(display,trials{3},'feedbackEvent',feedback2use);				% Nonmatch - stimulus2 then 1trials{4} = addTrialEvent(display,[],'stimulusEvent',...				'stimulus',stimulus2);trials{4} = addTrialEvent(display,trials{4},'ISIEvent',...				'stimulus',blankStimulus, ...				'duration', scanParams.ISIDuration);trials{4} = addTrialEvent(display,trials{4},'stimulusEvent',...				'stimulus',stimulus1);trials{4} = addTrialEvent(display,trials{4},'responseEvent',...				'stimulus',blankStimulus, ...				'duration', scanParams.responseDuration, ...				'answerType', 'binary', ...				'responseSet', '21');trials{4} = addTrialEvent(display,trials{4},'feedbackEvent',feedback2use);				% Create scan structuredoScanStruct.trials = trials;doScanStruct.trialDuration = scanParams.trialDuration;doScanStruct.trialSequence = [1 2 3 4 1 2];doScanStruct.dispString = 'doScan demo!';% Start the scan%response = doScan(display,doScanStruct,runPriority,1);% Close the one on-screen and many off-screen windows%SCREEN('CloseAll');