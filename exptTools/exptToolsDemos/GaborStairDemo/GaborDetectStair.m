clear all;%display = usePredefinedDisplay('screenNumber', 1, 'resolution', '1024x768, 75Hz', ...%			'cmapDepth', 10);display = loadDisplayParams;display = openScreen(display);% initialize staircase parametersstairParams.alternativeVarName = 'testPosition';stairParams.alternativeVarValues = ['L' 'R'];stairParams.adjustableVarName = 'test.contrast';stairParams.adjustableVarValues = [10.^[0:-.1:-3]];stairParams.adjustableVarStart = 1;stairParams.randomVars = {};stairParams.numCorrectForStep = 3;stairParams.numIncorrectForStep = 1;stairParams.maxNumTrials = 80;stairParams.maxNumReversals = 12;stairParams.correctStepSize = [3 3 2 1];stairParams.incorrectStepSize = [-3 -3 -2 -1];stairParams.feedback = 'auditory';stairParams.responseSet = '13';stairParams.curStairVars = {};stairParams.conditionName = {'contrast detect'};% initialize stimulus poarametersstimParams.testPosition = 'L';stimParams.duration = 2;	% in secondsstimParams.test.contrast = 1.0;stimParams.stnd.contrast = 0.0;stimParams.test.colorDir = [1 1 1];stimParams.stnd.colorDir = [1 1 1];stimParams.test.cycles = 8;	% total num cycles in patchstimParams.stnd.cycles = 8;	% total num cycles in patch% the folowing are in degreesstimParams.size = 12;stimParams.eccentricity = 12;stimParams.fixSize = .2;stimParams.spread = stimParams.size/4.5;trialGenFuncName = 'GaborTrial';%cd([machineName,':Users:bob:gabor']);dataName = 'GaborDetect';dataSumName = [dataName 'sum'];logFID(1) = fopen([dataName '.log'], 'at');fprintf(logFID(1), '%s\n', datestr(now));logFID(2) = 1;newDataSum = doStaircase(display, stairParams, stimParams, trialGenFuncName, 0, logFID, ...						'precomputeFirstTrial');fclose(logFID(1));sumExists = 1;eval('load(dataSumName)', 'sumExists = 0;');if sumExists	dataSum(length(dataSum):length(dataSum)+length(newDataSum)) = newDataSum;	save(dataSumName, 'dataSum');	disp(['DataSum file ' dataSumName ' updated.']);else	disp(['DataSum file ' dataSumName ' not found.']);	dataSum = struct(newDataSum);	save(dataSumName, 'dataSum');	disp(['New dataSum file ' dataSumName ' saved.']);endclear mex;showCursor(0);last = length(dataSum);% fit and plot a Weibull functionnonZero = find(dataSum(last).numTrials);pc = dataSum(last).numCorrect(nonZero)./dataSum(last).numTrials(nonZero);[alpha,beta] = Fit2AFCWeibull(dataSum(last).stimLevels(nonZero), ...				dataSum(last).numCorrect(nonZero), ...				dataSum(last).numTrials(nonZero)-dataSum(last).numCorrect(nonZero));weibull = ComputeWeibTAFC(dataSum(last).stimLevels(nonZero), alpha, beta);figure;semilogx(dataSum(last).stimLevels(nonZero), weibull, '-', ...		dataSum(last).stimLevels(nonZero), ...		dataSum(last).numCorrect(nonZero)./dataSum(last).numTrials(nonZero),'o');title(['alpha = ' num2str(alpha) '; beta = ' num2str(beta)]);% plot the history of the staircase (to check for proper convergence)figure;semilogy(dataSum(last).history);