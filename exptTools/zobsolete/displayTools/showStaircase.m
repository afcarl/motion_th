function results = showStaircase(display,staircase,runPriority)%results = showStaircase(display,staircase,runPriority)%%staircase structure:%staircase = %%          stimParams: struct		structure of stimulus parameters%                 ISI: double      interstimulus interval (secs)%    responseInterval: double      (secs) NaN waits for user to respond%      numInterleaves: integer     number of interleaved staircases%           numTrials: integer     number of trials for each staircase (interleave)%             logFlag: boolean     1 for stepping in log increments/decrements.%      intensityRange: 1x2 double  range of intensity values%   numIntensitySteps: double      # of steps in intensityRange (see logFlag)%       testIntensity: double      intensity of test stimulus%               nDown: integer     # of correct responses in a row before %                                  decreasing intensity (3)% 	          nUp: integer         # of incorrect responses in a row%                                  before increasing intensity (1)%        stimFunction: string      name of function to generate%                                  Stimuli at each intensity%  intensityParamName: string      name of field of stimulus that's%                                  linked to intensity used by stimFunctio%         ISIstimulus: struct      pattern displayed between trials/stimulis%        nDoubleSteps: integer     number of initial steps for which stepsize%                                  is doubled to help speed up convergence%                                  (default is 8).%    stimRandFunction: string      name of function to randomize parameters for %								   each trial.  Should be of form:%                                  trial = <stimRandFunction>(display,staircase,trial,comparisonIntensity,trialNumber);if ~exist('runPriority')	runPriority = 0;  %use the nicest priority by defaultendif isfield(staircase,'nDoubleSteps')	nDoubleSteps = staircase.nDoubleSteps;else	nDoubleSteps = 8;end%generate the intensity rangeint1=staircase.intensityRange(1);int2=staircase.intensityRange(2);if staircase.logFlag  intensityList = exp(linspace(log(int1),log(int2),staircase.numIntensitySteps));else  intensityList = linspace(int1,int2,staircase.numIntensitySteps);end%initialize results structureresults.intensity = NaN*ones(staircase.numTrials,staircase.numInterleaves);results.response = NaN*ones(staircase.numTrials,staircase.numInterleaves);results.testIntensity = staircase.testIntensity;% create the comparison (non-changing) stimulus testStimulus = setStimulusIntensity(display,staircase,results.testIntensity);testStimulus = createImagePointers(display,testStimulus);% create all of the test stimuli.for intensityNum = 1:length(intensityList)  countingString = ['Generating stimulus ' num2str(intensityNum)];  dispStringInCenter(display,countingString,0.5,'white')  comparisonStimulus(intensityNum) = ...  setStimulusIntensity(display,staircase,intensityList(intensityNum));  comparisonStimulus(intensityNum) = createImagePointers(display,comparisonStimulus(intensityNum));  dispStringInCenter(display,countingString,0.5,'background') end%determine the starting intensity number by finding the%member of intensityList that is closest to startIntensity.diffIntensityList=abs(staircase.startIntensity-intensityList);startIntensityNum = find(min(diffIntensityList)==diffIntensityList);% there may be several closest initial values for intensityif length(startIntensityNum)>1  startIntensityNum = startIntensityNum(1);end%set initial comparison intensity to startIntensityNumresults.intensity(1,:) = intensityList(startIntensityNum)*ones(1,staircase.numInterleaves);%set up intensity numberintensityNum = startIntensityNum * ones(1,staircase.numInterleaves);% create Image Pointers for the ISI Stimulusif isfield(staircase,'ISIstimulus')  staircase.ISIstimulus=createImagePointers(display,staircase.ISIstimulus);end      % build the template trial structure for use belowtrial.ISI = staircase.ISI;trial.responseInterval = staircase.responseInterval;if  isfield(staircase,'ISIstimulus')  trial.ISIstimulus = staircase.ISIstimulus;end%set up trial number and stepSize counterstrialNum = zeros(1,staircase.numInterleaves);CorrectinaRow = zeros(1,staircase.numInterleaves);IncorrectinaRow = zeros(1,staircase.numInterleaves);% initially set step size twice as large to speed convergence and% then change stepsize to 1 after "nDoubleSteps" trialsstepSize = 2*ones(1,staircase.numInterleaves);%determine staircase order.stairOrder = ones(staircase.numTrials,1)*[1:staircase.numInterleaves];stairOrder = shuffle(stairOrder(:));if isfield(staircase,'ISIstimulus')  showStimulus(display,staircase.ISIstimulus);endpressKey2Begin(display);for i=1:length(stairOrder)	stairNum = stairOrder(i);	trialNum(stairNum) = trialNum(stairNum)+1;	trial.stimulus(1) = comparisonStimulus(intensityNum(stairNum));    trial.stimulus(2) = testStimulus;	results.intensity(trialNum(stairNum),stairNum)=intensityList(intensityNum(stairNum));	%perturb the stimulus if psuedo-randomization is desired.	if isfield(staircase,'stimRandFunction')		evalstr = (['trial = ',staircase.stimRandFunction,'(display,staircase,trial,',...		    num2str(intensityList(intensityNum(stairNum))),',',int2str(i),');']);		eval(evalstr);	end	%show the trial		response = showTrial(display,trial,runPriority);	if response == -1		disp('Aborting staircase.');		return	end	results.response(trialNum(stairNum),stairNum)=response;		%update the intensity for the next trial (unless it's the last trial)	if trialNum(stairNum)<staircase.numTrials		if response == 1  			CorrectinaRow(stairNum) = CorrectinaRow(stairNum)+1;			if CorrectinaRow(stairNum)==staircase.nDown %decrement by stepsize				thisStepSize = -stepSize(stairNum);				CorrectinaRow(stairNum)=0;			else				thisStepSize = 0;			end		elseif response == 0; 			IncorrectinaRow(stairNum) = IncorrectinaRow(stairNum)+1;			if IncorrectinaRow(stairNum) %increment by stepsize				thisStepSize = stepSize(stairNum);				IncorrectinaRow(stairNum)=0;			else				thisStepSize = 0;			end		else %keep it the same			thisStepSize = 0;		end		%increment the new intensity number, but crop wrt intensity list size.		intensityNum(stairNum) =  min(max(intensityNum(stairNum)+thisStepSize,1),length(intensityList));		%update new results.intensity array		results.intensity(trialNum(stairNum)+1,stairNum) = ...			intensityList(intensityNum(stairNum));		%lower the step size if 8 trials have passed for this staircase.		if trialNum(stairNum) > nDoubleSteps			stepSize(stairNum) = 1;		end	endend		