function img=insertFixation2(display,img,fixSize,fixColors,fixPosition)%% imWithFix=insertFixation(display,img,[fixSize],[fixColors],[fixPosition]) %% AUTHOR: Boynton% DATE:   February, 1998.% % PURPOSE: %    Creates a fixation point using the default display%    colors of 'black' and 'white' (reserved colors).%% ARGUMENTS:% % display:      display data structure% img:          the stimulus.image % % fixSize:      Fixation size.  %               Default is 0.5 degrees visual angle% fixColors:    Fixation color.  %               Default is reserved hi and lo colors% fixPosition:  Fixation position.  %               Default is center of image. %               %               Deviations are specified in terms of visual degrees.% % % MODIFICATIONS:%   02.18.98:  BW added fixPosition, comments, variable name changes% if ~exist('fixSize')   fixSize=0.5;end% Measure fixation size so center of fixation can be in the% center of the image%  s = floor(angle2pix(display,fixSize));margin =max(floor(angle2pix(display,fixSize/4)),1);% Measure image size and compute center% m=size(img,1);n=size(img,2);fixCenter = round([size(img,1),size(img,2)]/2);[x,y]=meshgrid([1:s],[1:s]);numImages = size(img,3);if ~exist('fixColors')  hi = display.reservedColor(findName(display.reservedColor,'white')).fbVal;  lo = display.reservedColor(findName(display.reservedColor,'black')).fbVal;else  hi = fixColors(2);  lo = fixColors(1);end% Create the fixation image% f= hi*ones(size(x));% Find the indices corresponding to the fixatioin location in the% image. % f([margin+1:size(x,1)-margin],[margin+1:size(x,2)-margin])= ...    lo*ones(size(x)-margin*2);id =(1:prod(size(f)))';% If the fixation position is not sent in, place it in the middle% of the image.  Do this by subtracting off one-half the box size% from the fixCenter position.if ~exist('fixPosition')  fixPosition = [0 0];end  % If the fixation position was sent in, then it was passed in as% an angle above or below the center of the image.  So, we will% compute the image center (as above) and add in the displacement.% The y-axis seems (to me, BW) to have strange orientation,% running from down to up.  The x-axis runs from left to right,% as I expected.% fixOffset = ...    [-angle2pix(display,fixPosition(1)), ...	angle2pix(display,fixPosition(2))];% Specificy the location (in pixels) of the bottom of the fixation.% fixCenter = fixCenter + fixOffset;fixBottom = [floor(fixCenter(2)-s/2)-1, ceil(fixCenter(1)-s/2)];% insert the fixation point into 'img' at the proper index locations.% for ii=1:numImages img( m*(x(id)+fixBottom(1)) +   y(id)+fixBottom(2) + (ii-1)*m*n) = f;endreturn;% Debugging stuff%               % img = stimulus1.image;% fixSize = .3;% fixColors = [1 2];% fixPosition = [.5 -.5];% foo = insertFixation2(display,stimulus.image,fixSize,fixColors);% imshow(foo)