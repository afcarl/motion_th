% DATE:  	02.13.98% AUTHOR: 	Heidi Baseler, Allen Poirson% PURPOSE:	Measures the SPECTRA of a display device%			Uses "cmeter" function written by D. Brainard for Matlab 5.1.%			Steps through calibration targets, reading data from the SpectraScan % 			PR650 colorimeter.% % HISTORY:	This script was modified from Xuemei Zhang's script "cmeterCalib.m" %			written in August, 1997 on Turquoise.% 			Adapted by HAB to calibrate NEC Flat Panel LCD Monitor with either %			vermillion in Jordan Hall or with ochre in the Lucas Center% To check monitor numbering, go to "Monitors & Sound" under Control Panels, select% "Arrange" and click on "Identify the monitors"% Generally, for NEC (2nd) monitor, use monitor = 1; % for Mac console monitor, use monitor = 0monitor = 1;% To select the spatial and temporal parameters on the NEC MultiSync LCD2000 monitor,% push the "PROCEED" button on monitor and scroll down to "Display Mode"synchFreq = 73.8		% Refresh rate of the NEC MultiSync LCD2000 - 02.12.98targetSize = [1024 1280];% Choose the gun values and maximum value you'd like to measure% Maximum value = 1023 for 10-bit board, 255 for 8-bit boardgunColors = [1 0 0; 0 1 0; 0 0 1; 1 1 1];% Measure the spectra[gunSpects, wavelengths, gunXYZ] = cmeterNECspectra(targetSize, gunColors, monitor, synchFreq);% Plot the resultsplot(wavelengths,gunSpects(:,1),'r',wavelengths,gunSpects(:,2),'g',wavelengths,gunSpects(:,3),'b',wavelengths,gunSpects(:,4),'k')% Test for additivitytestw=sum((gunSpects(:,1:3)'));% First plot measured white spectrum (all guns on)figure; plot(wavelengths,gunSpects(:,4),'b')hold on% Then plot sum of 3 gun spectraplot(wavelengths,testw,'r')title('Measured white = blue trace; Summed guns = red trace')%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Calculate and save spectra of displayload coneSpectra;spectraWavelength = 380:730;coneSpectra = coneSpectra(11:361,:);sampling = wavelengths(2) - wavelengths(1);monitorSpectra = interp1(wavelengths, gunSpects, spectraWavelength)/sampling;save SpectraFeb98.mat monitorSpectra spectraWavelength gunSpects sampling wavelengths coneSpectra gunColors monitor targetSize synchFreq gunXYZ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Close the loop and and make sure that we can get out cone isolating% stimuli, given the gamma tables, monitor spectra measures, and % cone sensors.  N.B.  Assumes that you've already got a gamma table measure% that you like.  See the code called 'calibGamma'.load SpectraFeb98load GammaFeb98% Perturbation direction in LMS coordinatesincLMS = [0 0 1]';cmapSize = 1024;monitorRGB = monitorSpectra(:,1:3);RGB2LMS = coneSpectra' * monitorRGB;LMS2RGB = inv(RGB2LMS);bkgRGB = [0.5 0.5 0.5]';bkgLMS = RGB2LMS * bkgRGB;% This routine returns the scale factor that puts% the vector into the values between 1.0 and 0.0[scaleFac,meanRGB]=maxConeContrast(bkgLMS,incLMS,monitorRGB,coneSpectra);incLMSmax = scaleFac * incLMS;incRGB = LMS2RGB * incLMSmax;stimulusRGB = bkgRGB + incRGBmeanRGBbkgRGB% Change the linear gun values to color map lut values% Scale the 1.0 - 0.0 range to the 1023 - 0 rangebkgRGB1024 = round(bkgRGB * cmapSize);bkgCmapVal(1) = invGamma10(bkgRGB1024(1),1)	% * (cmapSize-1);bkgCmapVal(2) = invGamma10(bkgRGB1024(2),2)	% * (cmapSize-1);bkgCmapVal(3) = invGamma10(bkgRGB1024(3),3)	% * (cmapSize-1);bkgCmapValstimulusRGB1024 = round(stimulusRGB * cmapSize);stimCmapVal(1) = invGamma10(stimulusRGB1024(1),1)	% * (cmapSize-1);stimCmapVal(2) = invGamma10(stimulusRGB1024(2),2)	% * (cmapSize-1);stimCmapVal(3) = invGamma10(stimulusRGB1024(3),3)	% * (cmapSize-1);stimCmapVal% Assume that you already have these variables set, since you've saved the spectra before[bkgSpec, wavelengths] = cmeterOneMeas(targetSize, bkgCmapVal, monitor, synchFreq);[stimSpec, wavelengths] = cmeterOneMeas(targetSize, stimCmapVal, monitor, synchFreq);bkgSpec = interp1(wavelengths, bkgSpec, spectraWavelength)/sampling;stimSpec = interp1(wavelengths, stimSpec, spectraWavelength)/sampling;figureplot(spectraWavelength,bkgSpec,'r-'); hold on; plot(spectraWavelength,stimSpec,'g-'); title('bkg (r-),stim(g-)');bkgCmapValstimCmapVal%% DEBUGGING CASE  %%%if 0rbCmapVal = [600, 0 ,1023]gbCmapVal = [0,800,1023]% Measure the background and stimulus spectra[rbSpec, wavelengths] = cmeterOneMeas(targetSize, rbCmapVal, monitor, synchFreq);[gbSpec, wavelengths] = cmeterOneMeas(targetSize, gbCmapVal, monitor, synchFreq);figureplot(rbSpec,'r-'); hold on; plot(gbSpec,'g-'); end%% DEBUGGING CASE  %%%if 0rCmapVal = [1023, 0 ,0];gCmapVal = [0,1023, 0];bCmapVal = [0,0,1023];% Measure the background and stimulus spectra[rSpec, wavelengths] = cmeterOneMeas(targetSize, rCmapVal, monitor, synchFreq);[gSpec, wavelengths] = cmeterOneMeas(targetSize, gCmapVal, monitor, synchFreq);[bSpec, wavelengths] = cmeterOneMeas(targetSize, bCmapVal, monitor, synchFreq);figureplot(rSpec,'r-'); hold on; plot(gSpec,'g-'); hold on; plot(bSpec,'b-'); rCmapValgCmapValbCmapValend% Do the relevant checks.bkgLMSMeas = coneSpectra' * bkgSpec';stimLMSMeas = coneSpectra' * stimSpec';% This vector should be in the same color direction as incLMS vector% If so, you win!!!  pertMeas = stimLMSMeas - bkgLMSMeas% change the 'pertMeas' and the 'incLMS' % vector to unit length in order to really check this out.incLMS/norm(incLMS,2)pertMeas/norm(pertMeas,2)