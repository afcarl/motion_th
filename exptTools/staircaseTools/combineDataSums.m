function combinedDataSum = combineDataSums(subjectName, varargin)% dataSum = combineDataSums(subjectName, ['dataSum', dataSum,] ['doAnalysis', beta, doErrors], condition1Name, condition1Nums, [condition2Name, condition2Nums], ...)% % This routine combines different runs of various staircases into% a single dataSum array.  Both the subjectName and the conditionNames% variables should be strings.  ConditionNums should be vectors.% For example, to combine billDiThreshold1Sum.mat and% billDiThreshold2Sum.mat, you would call combineDataSums('bill','DiThreshold',[1 2]);% Different runs of the same staircase, as determined by the conditionName field, are% combined into one.  In the current configuration, the stimulus levels must be the same% between different runs of the same staircase.%% A base dataSum can be passed in.  This is done by making the second% argument the string 'dataSum' and the third argument the base dataSum itself.%% Two fields of the dataSums are mangled by this routine: history and% reversalStimLevel, as the values from the different runs of a given% staircase are appended to one another.if strcmp(varargin{1},'dataSum')	combinedDataSum=varargin{2};	varargin = varargin(3:end);endif strcmp(varargin{1},'doAnalysis')	doAnalysisFlag = 1;	beta = varargin{2};	doErrorsFlag = varargin{3};	if doErrorsFlag & ~beta		error('must provide a fixed slope if calculating error in beta');	end	varargin = varargin(4:end);else	doAnalysisFlag = 0;endreanalysisList = [];for hh = 1:2:length(varargin)			% Number of experiments to combine	for ii = 1:length(varargin{hh+1})	% Number of sessions within each experiment to combine    		dataSumName = [subjectName varargin{hh} num2str(varargin{hh+1}(ii)) 'Sum'];	% Get each session		load(dataSumName);	    		for jj = 1:length(dataSum)		% For each dataSum(jj) in the session (ii)...	        			if ~isfield(dataSum(jj),'analysis')				dataSum(jj).analysis = [];			end					if ~exist('combinedDataSum','var')				combinedDataSum = dataSum(jj);				reanalysisList = 1;			else				whichStaircase = 0;				for kk = 1:length(combinedDataSum)	% Go through each combined(kk) to try to find dataSum(jj)					if (length(dataSum(jj).condName)==length(combinedDataSum(kk).condName)) & ~whichStaircase						whichStaircase = kk;						for ll = 1:2:length(dataSum(jj).condName)							if ~(strcmp(dataSum(jj).condName{ll},combinedDataSum(kk).condName{ll}) & ...										(dataSum(jj).condName{ll+1} == combinedDataSum(kk).condName{ll+1}))								whichStaircase = 0;							end						end					end				end	        				if ~whichStaircase					combinedDataSum(end+1) = dataSum(jj);					reanalysisList = [reanalysisList length(combinedDataSum)];				else					combinedDataSum(whichStaircase).history = ...						[combinedDataSum(whichStaircase).history dataSum(jj).history];					combinedDataSum(whichStaircase).numTrials = ...						combinedDataSum(whichStaircase).numTrials + dataSum(jj).numTrials;					combinedDataSum(whichStaircase).numCorrect = ...						combinedDataSum(whichStaircase).numCorrect + dataSum(jj).numCorrect;					reanalysisList = [reanalysisList whichStaircase];				end			end		end	endendif doAnalysisFlag & ~isempty(reanalysisList)	for ii = unique(reanalysisList)		if beta & doErrorsFlag			combinedDataSum(ii).analysis = analyzeStaircase(combinedDataSum(ii),'fixSlope',beta,'threshErr',200);		elseif beta			combinedDataSum(ii).analysis = analyzeStaircase(combinedDataSum(ii),'fixSlope',beta);		else			combinedDataSum(ii).analysis = analyzeStaircase(combinedDataSum(ii));		end	endend