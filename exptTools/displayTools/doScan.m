 function [responses,scanHistory] = doScan(display, scan, runPriority, showTiming, returnHistory);% [responses,scanHistory] = doScan(display, scan, [runPriority], [showTiming], [returnHistory]);%% This routine runs a scan.  There are five fields:%%	o display - This is the display struct, usually returned from usePredefinedDisplay%%	o scan - This is the scan struct.  It must contain two fields:%%		trials - Ah, trials.%		trialSequence%%	  The following are scan's optional fields:%%		startSecs%		startScan%		trialDuration%		dispString%		prescanStimulus%		prescanDuration%%	o runPriority - defaults to 0 (low priority).  Maximum of 7.%%	o showTiming - defaults to 1 (shows time elapsed over scan).%%	o returnHistory - defaults to 0.  Flag determining whether%						key press info (besides correct/incorrect) and%						randomized stimulus info is returned.  Causes%						a slight hit in execution speed between trials.%% doScan returns two values:%%	o responses - an array of bits indicating whether the response to a%				given trial was correct or incorrect%%	o scanHistory - a struct containing arrays to be returned.  This is kept separate%				from responses for hysterical reasons%% 9/98: Bill Press and Ben Backus, 9/98% ?/98: BB: Added use of optional fields in scan argument for countdown%   	parameters startSecs and startScan% 5/99: Huk and Press added historyStructif ~exist('runPriority', 'var')	runPriority = 0; 			%use the nicest priority by defaultendif ~exist('showTiming', 'var')	showTiming = 1;endif ~exist('returnHistory', 'var')	returnHistory = 0;end% Set number of seconds in countdownif isfield(scan, 'startSecs')	startSecs = scan.startSecs;else	startSecs = 5;end% Set number of seconds before stimulus starts at which% scanner is to start running.  Typically needs to be% Two times the TR.  The default is 3 because our most commonly% used protocol, wand-8plane-2shot, has a TR of 1.5 sec.if isfield(scan, 'startScan')	startScan = scan.startScan;else	startScan = 3;endnTrials = prod(size(scan.trialSequence));responses = NaN * ones(1,nTrials);if length(scan.trialDuration)~=length(scan.trials)	if length(scan.trialDuration)==1		scan.trialDuration = repmat(scan.trialDuration,[1 length(scan.trials)]);	else		error('scan.trialDuration must be scalar or of same length as scan.trials');	endendif isfield(scan,'dispString')	pressKey2Begin(display,scan.dispString);else	pressKey2Begin(display);endcountDown(display,startSecs,startScan);time=getSecs;timeToEndTrial = 0;		% Total time from beginning of scan at which the						% current trial must end; however, it will only						% extend a given trial to this value -- it will not						% cut it short (waitTill will give a warning if the						% trial length causes a trial to overshoot this time).						if isfield(scan,'prescanStimulus')	showStimulus(display,scan.prescanStimulus);endif isfield(scan,'prescanDuration')	timeToEndTrial = timeToEndTrial + scan.prescanDuration;	waitTill(timeToEndTrial,time);endfor trialNum=1:nTrials	if ~returnHistory		responses(trialNum) = ...			doTrial(display, scan.trials{scan.trialSequence(trialNum)}, runPriority);	else		[responses(trialNum),trialHistory] = ...			doTrial(display, scan.trials{scan.trialSequence(trialNum)}, runPriority, 0, 1);		historyFields = fieldnames(trialHistory);		for ii = 1:length(historyFields)			setName = ['scanHistory.' historyFields{ii} '(trialNum) = getfield(trialHistory,historyFields{ii});'];			eval(setName);		end	end	if responses(trialNum) == -1		return	end	timeToEndTrial = ...		timeToEndTrial + scan.trialDuration(scan.trialSequence(trialNum))%		if (time<timeToEndTrial)			waitTill(timeToEndTrial,time);%		endendif showTiming	disp(['Stimulus time: ',num2str(getSecs-time)]);end;