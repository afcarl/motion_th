function [answer,keyHit] = doTrial(display,trial,runPriority)%response = doTrial(display,trial,runPriority)answer = NaN;keyHit = [];if ~exist('runPriority')	runPriority = 0;  					%use the nicest priority by defaultendbackgroundColor = findName(display.reservedColor,'background');timeSeriesBefore = zeros(1,size(trial,1));timeSeriesAfter = zeros(1,size(trial,1));for eventNum = 1:size(trial,1)		material = trial{eventNum,2};		% The stuff to act upon for any given event	switch trial{eventNum,1}			case 'stimulusEvent',			timeSeriesBefore(eventNum) = getSecs;			showStimulus(display,material.stimulus,runPriority);			timeSeriesAfter(eventNum) = getSecs;		case 'ISIEvent'						if isfield(material,'stimulus')				showStimulus(display,material.stimulus,runPriority);				if isfield(material,'duration')					waitTill(material.duration);				end			elseif isfield(material,'duration')				SCREEN(display.windowPtr,'SetClut',greyCmap(display));				waitTill(material.duration);			else				error('ISI has to have at least a duration or stimulus field!');			end						case 'soundEvent',			sound(material.sound);		case 'responseEvent',				if isfield(material,'stimulus')  % There's a stimulus to show during the response period				showStimulus(display,material.stimulus,runPriority);			end						keyHit = waitTill(material.duration);			if isempty(keyHit)  % No key was hit during response interval								responseIndex = NaN;							else  				% A key was hit								responseIndex = findstr(material.responseSet, keyHit);   % Find which response was made				if isempty(responseIndex)	% Invalid response (was not in responseSet)					answer = NaN;				elseif isfield(material,'answerType')   % answerType was specified								switch material.answerType						case 'binary',							answer = (responseIndex==1);						case '1toN',							answer = responseIndex;						case 'none',							answer = [];						otherwise,							error('Not a valid answerType (just leave it out for binary).');					end								else			% assume answerType is the default (i.e., binary)										answer = (responseIndex==1); % Default answerType is binary				end			end					case 'feedbackEvent',	% Remember to check whether various feedback strings even exist				if ~exist('responseIndex','var')				feedbackText = material.noResponseText;				feedbackColor = material.noResponseColor;			elseif isnan(responseIndex)				feedbackText = material.noResponseText;				feedbackColor = material.noResponseColor;			elseif isempty(responseIndex)				feedbackText = material.invalidResponseText;				feedbackColor = material.invalidResponseColor;			else				feedbackText = material.validResponsesText{responseIndex};				feedbackColor = material.validResponsesColor{responseIndex};			end			vLoc=material.feedbackVerticalLocation;			timeRightNow = getSecs;			dispStringInCenterFast(display,feedbackText,vLoc,display.reservedColor(feedbackColor).fbVal,32);			waitTill(material.duration, timeRightNow);			dispStringInCenterFast(display,feedbackText,vLoc,display.reservedColor(backgroundColor).fbVal,32);					case 'soundFeedbackEvent',	% Remember to check whether various feedback strings even exist				if ~exist('responseIndex','var')				feedbackSound = material.noResponseSound;			elseif isnan(responseIndex)				feedbackSound = material.noResponseSound;			elseif isempty(responseIndex)				feedbackSound = material.invalidResponseSound;			else				feedbackSound = material.validResponseSound{responseIndex};			end			sound(feedbackSound);					otherwise,			error([trial{eventNum,1} ' is not a valid event type.']);	endend% timeSeries(eventNum+1) = getSecs;%timeSeries - timeSeries(1)timeSeriesAfter - timeSeriesBefore