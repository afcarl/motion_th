function [timing,charsHit,timingVals]=showStimulus(display,stimulus,runPriority,showTiming,checkKeys)%[timing,charsHit,timingVals] = showStimulus(display,stimulus,[runPriority],[showTiming],[checkKeys])%%display is the standard display struct (see loadDisplayParams)%stimulus.imagePtr is an y-by-x-by-n 3D array of images to blit%stimulus.cmap is a 256-by-3-by-m 3D array of cmaps to load%stimulus.seq is an array of integers that instruct what to do on each refresh.% A positive number says to blit the i-th image% A negative number says to load the i-th colormap% There may be a imaginary part, as well.  This causes a time stamp%  to be saved.  The magnitude of the imaginary part is ignored.%runPriority sets the run priority to a value between 0 and 7.%showTiming is a flag that determines whether timing information is returned%checkKeys is a flag that determines whether a keyboard check should be performed at each refresh%%timing is the length of time it took to show the stimulus%charsHit is a list of characters and times a key was pressed during the stimulus presentation%timingVals is a vector of times corresponding to the refreshes that had non-zero imaginary componentsif nargin==0	disp('Initializing showStimulus');	returnendif ~exist('runPriority')	runPriority = 0;  %use the nicest priority by defaultendif ~exist('showTiming')	showTiming = 0;endif ~exist('checkKeys')	checkKeys = 0;endcharsHit = [];timingVals = [];if isfield(stimulus, 'gamma')	gammaFlag = 1;else	gammaFlag = 0;endif ~isfield(stimulus,'imagePtr')	%Generate image pointers for each image by calling	disp('WARNING: Creating image pointers before stimulus presentation.');	disp('         This should be done before calling "showStimulus" for');	disp('         accurate timing.  See "createImagePointers" for help.');	stimulus = createImagePointers(display,stimulus);endnFrames = length(stimulus.seq);HideCursor;nCmap=size(stimulus.cmap,3);nImages = length(stimulus.imagePtr);priority(runPriority);s = getSecs;for frame = 1:nFrames	frameVal = stimulus.seq(frame);	imgOrCmapNum = real(frameVal);	if imag(frameVal)		timingVals(end+1) = getSecs;	end	%put in an image		if imgOrCmapNum>0		   		imgNum = mod(imgOrCmapNum-1,nImages)+1;		SCREEN(display.windowPtr,'WaitVBL');		SCREEN('CopyWindow',stimulus.imagePtr(imgNum),display.windowPtr,stimulus.srcRect,stimulus.destRect);	%put in a color table	elseif imgOrCmapNum<0      		cmapNum = mod(-imgOrCmapNum-1,nCmap)+1;		cmap = double(stimulus.cmap(:,:,cmapNum));		%cmap = insertReservedCols(display,cmap);		if gammaFlag			SCREEN(display.windowPtr,'Gamma',stimulus.gamma(:,:,cmapNum),display.pixelDepth);		end		SCREEN(display.windowPtr,'SetClut',cmap);  %%%% This needs to be changed to SCREEN(display.windowPtr,'SetClut',cmap,0,10) for 10-bit use	%seq(frame) = 0; do nothing this frame.	else 								SCREEN(display.windowPtr,'WaitVBL');	end	%if checkKeys & imgOrCmapNum<=0	%	if charAvail	%		charsHit{end+1} = {getChar getSecs};	%	end	%end	endtiming = getSecs-s;if showTiming	disp(['Stimulus run time: ',num2str(timing),' seconds.']);endpriority(0);