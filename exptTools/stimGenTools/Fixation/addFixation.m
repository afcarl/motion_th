function varargout = addFixation(varargin)% [monocOrLeftImage, rightImage] = addFixation(display, image, [rightImage], parameters)% % Add a fixation mark or nonius lines to the centers of the images.%% First argument should be the display struct.% Second argument should be an image (or 3D array containing a vector of images).% Third argument can either be another image (e.g. right image for stereo)% or the parameters struct.  The parameters struct must have a 'type' field.%% parameters.type is a string.  Currently supported fixation types are:%    'VerticalNonius'  Vertical nonius lines only%    'NoniusLines'  	 Horizontal and vertical nonius lines%    'NoniusCrossBox'  Nonius lines and binocular fixation cross, all in a binocular box%    'Box'             Binocular fixation mark in shape of a box, only.% For monocular images, only 'Box' is supported (only 'Box' makes any sense).%% The parameters structure (p) for each of these fixation types is:%%    'VerticalNonius'  p.gap         gap between the nonius lines in pixels (4)%          and         p.height      length of each nonius line in pixels (8)%     'NoniusLines'    p.width       width  of each nonius line in pixels (1)%                      p.color       color to use (2)%                      p.binocDot    add a binocular dot in the middle. (0) for none, 1 for a dot,%																		 and 2 for a circle.%											 p.offset			 specify an x,y offset from the center of the image%%    'NoniusCrossBox'  p.radius      radius of the box in pixels (default=7 gives 15x15 box, min=3)%                      p.twoColors   colors to use for back-, foreground (default=[0 2])%											 p.offset			 specify an x,y offset from the center of the image%%    'Box'             p.radius      radius of box in pixels (default=1 gives 3x3 box; 0 gives 1x1 dot)%                      p.twoColors   colors to use for back-, foreground ([0 2])%											 p.emptyFlag	 allows the space inside the fixation border to show the stimulus%											 p.offset			 specify an x,y offset from the center of the image%% Be sure to define p.twoColors or p.color if you're not using 2 for the fbVal of the% color you want.  initDisplayStruct, which is called by usePredefinedDisplay, reserves% fbVal = 0 for the background and fbVal = 2 for white, which is why those% values are the defaults.  Use the function getReservedColor(display, 'white') to get% the fbVal for white (assuming it's been previously reserved).%% The output is one or two images, depending on the input.%%	addFixation can still be called with the older style:% % 	[monocOrLeftImage, rightImage] = addFixation(image, [rightImage], [fixationType], [parameters])%% In this case, sizes may not be specified in degrees, offsets may not be used, and the% parameters argument is optional.%% 9/16/98 David Fleet, Ben Backus: insertNoniusCross.m% 2/16/99 Ben Backus: new argument structure, added VerticalNonius and Box types% 5/11/99 Bill Press: allow p.type to exist, making fixationType optional.  Added NoniusLines and%											circular fixation point.% 6/9/99	Bill Press: revamped how the function is called.  Included display struct.  Allow%											for degree dimensions and offsets (degree dimensions not yet implemented).if isstruct(varargin{1})	display = varargin{1};else	display = [];endif ~isempty(display)						% NEW style	if nargin<3 | (isnumeric(varargin{3}) & nargin<4)		error('Need to send in display struct, at least one image, and params struct.');	end	images{1} = varargin{2};	if isnumeric(varargin{3})	% Two images passed		images{2} = varargin{3};		p = varargin{4};	  nImage = 2;	else											% One image passed		p = varargin{3};		nImage = 1;	endelse												% OLD style	if nargin<2 | (isnumeric(varargin{2}) & nargin<3)		error('Either fixationType or parameters must be passed into addFixation.');	end	images{1} = varargin{1};	if isnumeric(varargin{2})		%% two images were passed...	  nImage = 2;	  images{2} = varargin{2};		if ischar(varargin{3})			% ...and fixationType passed...	  	fixationType = varargin{3};	  	if nargin == 4	    	p = varargin{4};					% ...with optional parameter structure	  	else	    	p = [];	  	end		else			p = varargin{3};					% ...and parameter structure passed without fixationType		end	  if any(size(images{1}) ~= size(images{2}))	    error('Left and right images are not of same size.');	  end	elseif ischar(varargin{2})	%% one image and fixationType passed...	  nImage = 1;	  fixationType = varargin{2};	  if nargin == 3	    p = varargin{3};     			% ...with optional parameter structure	  else	    p = [];	  end	else												%% one image and parameters passed		p = varargin{2};	endendif ~exist('fixationType','var')	if ~isfield(p,'type')		error('parameters.type must be provided.');	else		fixationType = p.type;	endendif nImage ~= nargout  error('Number of input image arguments (1 or 2) must be same as number of output arguments');end%get image sizes, and center locationsm = size(images{1},1);n = size(images{1},2);mdiv2=round(m/2);ndiv2=round(n/2);switch fixationType  case {'VerticalNonius','NoniusLines'}  %%%%%%%%%%%%%%% VerticalNonius and NoniusLines %%%%%%%%%%%%%%%%    if nImage ==1       error(['For fixationType ''' fixationType ''', first 2 arguments must be L, R images.']);    end        if isstruct(p)      okFields = {'gap' ; 'height' ; 'width' ; 'color' ; 'binocDot' ; 'type' ; 'offset'; 'flickerLevel'};      pFields = fieldnames(p);      for iField = 1:length(pFields)        if ~any(strcmp(pFields{iField}, okFields))          error(['''' pFields{iField} ''' is not a valid fixParam field name for ' fixationType '.']);        end      end    end        if isfield(p, 'gap')      gap = p.gap;           else gap = 4;      end    if isfield(p, 'height')   height = p.height;     else height = 8;   end    if isfield(p, 'width')    width = p.width;       else width = 1;    end    if isfield(p, 'color')    color = p.color;       else color = 2;    end    if isfield(p, 'binocDot') binocDot = p.binocDot; else binocDot = 0; end		if isfield(p, 'offset')	  offset = calcOffset(display,p);	else offset={[0,0],[0,0]}; end               line2add = repmat(color, height, width);        if mod(gap,2)      % give the extra pixel to gap in the right image      leftGap  = floor(gap/2);      rightGap = ceil(gap/2);    else      leftGap  = round(gap/2);      rightGap = round(gap/2);    end			% If the fixation structure is bigger than images, make images bigger		totalHeight = 2*height+leftGap+rightGap+2;	% +2 to leave extra space		if totalHeight > m			oldImages = images;			images = {zeros(totalHeight, n, size(oldImages{1},3)),...								zeros(totalHeight, n, size(oldImages{1},3))};			oldM = m; oldMdiv2 = mdiv2;			m = totalHeight; mdiv2 = round(totalHeight/2);			lowerY = (mdiv2-oldMdiv2+1);	upperY = (lowerY+oldM-1);			images{1}(lowerY:upperY,:,:) = oldImages{1};			images{2}(lowerY:upperY,:,:) = oldImages{2};		end		if strcmp(fixationType,'NoniusLines') & totalHeight > n			oldImages = images;			images = {zeros(m, totalHeight, size(oldImages{1},3)),...								zeros(m, totalHeight, size(oldImages{1},3))};			oldN = n; oldNdiv2 = ndiv2;			n = totalHeight; ndiv2 = round(totalHeight/2);			lowerX = (ndiv2-oldNdiv2+1);	upperX = (lowerX+oldN-1);			images{1}(:,lowerX:upperX,:) = oldImages{1};			images{2}(:,lowerX:upperX,:) = oldImages{2};		end		    widthOffset = floor(width/2);		heightOffset = floor(height/2);    %insert nonius structure into images, left nonius line on top.    for frameNum = 1:size(images{1},3)    	images{1}((mdiv2-leftGap-height):(mdiv2-leftGap-1), ...                (ndiv2-widthOffset):(ndiv2-widthOffset+width-1), frameNum) = line2add;    	images{2}((mdiv2+rightGap):(mdiv2+rightGap+height-1), ...                (ndiv2-widthOffset):(ndiv2-widthOffset+width-1), frameNum) = line2add;			if strcmp(fixationType,'NoniusLines')    		images{1}((mdiv2-widthOffset):(mdiv2-widthOffset+width-1), ...                  (ndiv2-leftGap-height):(ndiv2-leftGap-1), frameNum) = line2add';    		images{2}((mdiv2-widthOffset):(mdiv2-widthOffset+width-1), ...                  (ndiv2+rightGap):(ndiv2+rightGap+height-1), frameNum) = line2add';							end    end      if binocDot==1			      if mod(gap,2) dotHeight = 1; else dotHeight = 2; end      dot2add = repmat(color, dotHeight, width);						lowerY = (mdiv2-dotHeight+1);	upperY = mdiv2;			lowerX = (ndiv2-widthOffset);	upperX = (lowerX+width-1);      for frameNum = 1:size(images{1},3)      	images{1}(lowerY:upperY, lowerX:upperX, frameNum) = dot2add;      	images{2}(lowerY:upperY, lowerX:upperX, frameNum) = dot2add;			end								     elseif binocDot==2				sizeCircle = gap+2*width;			[x y] = meshgrid(1:sizeCircle);			dist = sqrt((x-(sizeCircle+1)/2).^2 + (y-(sizeCircle+1)/2).^2);			circle = (dist>=gap/2) & (dist<gap/2+width);			circleOffset = floor(sizeCircle/2);					lowerY = (mdiv2-circleOffset); upperY = (lowerY+sizeCircle-1);			lowerX = (ndiv2-circleOffset); upperX = (lowerX+sizeCircle-1);      for frameNum = 1:size(images{1},3)				for eye = 1:2      		images{eye}(lowerY:upperY, lowerX:upperX, frameNum) = ...      			images{eye}(lowerY:upperY, lowerX:upperX, frameNum) .* ~circle;			% blank out circle...      		images{eye}(lowerY:upperY, lowerX:upperX, frameNum) = ...      			images{eye}(lowerY:upperY, lowerX:upperX, frameNum) + color*circle;	% and then draw it				end			end		end					       case 'NoniusCrossBox',    %%%%%%%%%%%%%%% NoniusCrossBox %%%%%%%%%%%%%%%%    if nImage ==1       error('For fixationType ''NoniusCrossBox'', first 2 arguments must be L, R images.');    end        if isstruct(p)      okFields = {'radius' ; 'twoColors' ; 'type' ; 'offset'; 'flickerLevel'};      pFields = fieldnames(p);      for iField = 1:length(pFields)        if ~any(strcmp(pFields{iField}, okFields))          error(['''' pFields{iField} ''' is not a valid fixParam field name for NoniusCrossBox.']);        end      end    end        if isfield(p, 'radius')   radius = p.radius;       else radius = 7;        end    if isfield(p,'twoColors') twoColors = p.twoColors; else twoColors = [0 2]; end		if isfield(p, 'offset')	  offset = calcOffset(display,p);	else offset={[0,0],[0,0]}; end    if radius < 3       error('fixationParam.radius must be at least 3.');     end    width=2*radius+1;        % establish size of box and set it all to central background color    box = repmat(twoColors(1), 2*radius+1, 2*radius+1);        % fixation cross, nonius lines, and border of box, by mysterious magical Fleetcode    box(radius:radius+2,radius+1)=twoColors(2)*ones(3,1);    box(radius+1,radius:radius+2)=twoColors(2)*ones(1,3);    leftBox=box;    leftBox(radius-5:radius-2,radius+1)=twoColors(2)*ones(4,1);    leftBox(radius+1,radius-5:radius-2)=twoColors(2)*ones(1,4);    leftBox(1,:)=twoColors(2)*ones(1,width);    leftBox(width,:)=twoColors(2)*ones(1,width);    leftBox(:,1)=twoColors(2)*ones(width,1);    leftBox(:,width)=twoColors(2)*ones(width,1);        rightBox=fliplr(flipud(leftBox));        %insert fixation structure into images    for frameNum = 1:size(images{1},3)			lowerm = mdiv2-radius+offset{iImg}(2);			upperm = mdiv2+radius+offset{iImg}(2);			lowern = ndiv2-radius+offset{iImg}(1);			uppern = ndiv2+radius+offset{iImg}(1);    	images{1}(lowerm:upperm,lowern:uppern,frameNum) = leftBox;    	images{2}(lowerm:upperm,lowern:uppern,frameNum) = rightBox;    end		images{1} = images{1}(1:m,1:n,:);		images{2} = images{2}(1:m,1:n,:);			  case 'Box',             %%%%%%%%%%%%%%%%%%%% Box %%%%%%%%%%%%%%%%%%%%%%    if isstruct(p)      okFields = {'radius' ; 'twoColors' ; 'type' ; 'offset'; 'emptyFlag'; 'flickerLevel'};      pFields = fieldnames(p);      for iField = 1:length(pFields)        if ~any(strcmp(pFields{iField}, okFields))          error(['''' pFields{iField} ''' is not a valid fixParam field name for fixation type Box.']);        end      end    end        if isfield(p,'radius')   		radius = p.radius;       				else radius = 1;        		end    if isfield(p,'twoColors')		twoColors = p.twoColors; 				else twoColors = [0 2]; 		end			if isfield(p,'offset')			offset = calcOffset(display,p);	else offset={[0,0],[0,0]};	end		if isfield(p,'emptyFlag') 	emptyFlag = p.emptyFlag;				else emptyFlag = 0;					end    width=2*radius+1;        % establish size of box and set it all to central background color		if emptyFlag			box = zeros([2*radius+1 2*radius+1]);			if twoColors(1) ~= 0				warning('Drawing empty fixation point -- ignoring fix.twoColors(1)');			end		else	    box = repmat(twoColors(1), 2*radius+1, 2*radius+1);  	end		    % border of box    box(1,:)=twoColors(2)*ones(1,width);    box(width,:)=twoColors(2)*ones(1,width);    box(:,1)=twoColors(2)*ones(width,1);    box(:,width)=twoColors(2)*ones(width,1);        %insert box into images    for iImg = 1:nImage      for frameNum = 1:size(images{iImg},3)				lowerm = mdiv2-radius+offset{iImg}(2);				upperm = mdiv2+radius+offset{iImg}(2);				lowern = ndiv2-radius+offset{iImg}(1);				uppern = ndiv2+radius+offset{iImg}(1);				if emptyFlag					images{iImg}(lowerm:upperm,lowern:uppern,frameNum) = ...						images{iImg}(lowerm:upperm,lowern:uppern,frameNum) .* ~box;					images{iImg}(lowerm:upperm,lowern:uppern,frameNum) = ...						images{iImg}(lowerm:upperm,lowern:uppern,frameNum) + box;				else      		images{iImg}(lowerm:upperm,lowern:uppern,frameNum) = box;				end			end			images{iImg} = images{iImg}(1:m,1:n,:);		end      otherwise,    error(['Unknown fixationType ''' fixationType '''.']);    endvarargout = images;   % one or two image arraysreturnfunction offset=calcOffset(display,p)if isempty(display)	error('Fixation params can only have offset field if display was passed.');endpixOffset = p.offset;if ~iscell(pixOffset)	pixOffset{1} = pixOffset;endif length(pixOffset)==1	pixOffset{2} = pixOffset{1};endfor ii=1:2	offset{ii}(1) = angle2pix(display, pixOffset{ii}(1));	offset{ii}(2) = angle2pix(display, pixOffset{ii}(2));endreturn