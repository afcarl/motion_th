function seq = generateSequence(display, params)if ~isfield(params,'temporalType')	error('temporalType must be present in params');else	temporalType = params.temporalType;endif ~isfield(params,'duration')	error('Must provide a stimulus duration.');else	duration = params.duration;endframesPerTrial = round (display.frameRate * duration);if (strcmp(temporalType,'static'))		numFrames = 1;	else	if ~isfield(params,'envelopeType') & ~isfield(params,'spatialEnvelope')		error('spatialEnvelope must be present in params');	else		if isfield(params,'spatialEnvelope')			spatialEnvelope = params.spatialEnvelope;		else % for backwards compatability			spatialEnvelope = params.envelopeType;		end	end	if ~isfield(params,'temporalFrequency')		disp('Using default temporal frequency of one cycle/degree');		temporalFreq = 1;	else		temporalFreq = params.temporalFrequency;	end		framesPerCycle = round (display.frameRate / abs(temporalFreq));	numFrames = min([framesPerCycle framesPerTrial]);endif (strcmp(temporalType,'drift') & ~strcmp(spatialEnvelope,'none')) % if blitting...	seq = [-1 repmat(1:numFrames, [1 ceil(framesPerTrial/numFrames)])];else	seq = [1 -(1:framesPerTrial)];endseq = seq(1:(framesPerTrial+1));