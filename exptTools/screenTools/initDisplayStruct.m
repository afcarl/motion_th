function display = initDisplayStruct(monitor,card,resolution,position,screenNumber,stereoFlag,cmapDepth,distance)%display = initDisplayStruct(monitor,resolution,card,position,screenNumber,stereoFlag,cmapDepth,distance)%%  Initializes a display structure with conditions defined by properties.%  Property options are:%%  Monitor properties:%    'SanyoLCD'       			%    'RadiusGrayscale'%    'Multiscan720'%    'NecLcd2000'%%  Graphics card properites:%    'AV';%    'Radius10-bit'%    'BuiltIn8-bit'%%  Resolution properties:%    '640x480, 60Hz'%    '640x480, 67Hz'%    '800x600, 60Hz'%    '832x624, 75Hz'%    '1024x768, 60Hz'%    '1024x768, 75Hz'%%  Screen position properties:%    'room 454';%    'room 452';%    'outside bore'%    'inside bore'%    'shielded box'%%  screenNumber:%    0;  Same screen as console (default if no arg supplied)%    1;  2nd screen%%  stereoFlag:%    0;  Use ordinary code during image handling (default)%	 1;  Use split-screen code during image handling%%  cmapDepth:%	 Bit depth of the color maps.  Defaults to 8, but can be set to 10%	 for the Radius 10-bit DAC video boards (see tenBit2eightBit).%%  distance:%    Distance (to the screen in cm) is set to a default value in the code%    below, depending on the other parameters.  If supplied explicitly, the%    default value is replaced (happens near end of this function).%%  Note: not all combinations of monitor, card, resolution and position are allowed.% 01/22/98 gmb  Wrote it.% 09/04/98 btb and wap added optional screenNumber and stereo fields% 10/24/98 rfd & wap added 10-bit enhancements (cmapDepth stuff)% 10/27/98 rfd made maxGunVal a field in the display struct.clear displaydisplay.monitor = monitor;display.card = card;display.resolution = resolution;display.position = position;if ~exist('screenNumber')	display.screenNumber=0;else	display.screenNumber = screenNumber;endif ~exist('stereoFlag')	display.stereoFlag=0;else	display.stereoFlag=stereoFlag;endif ~exist('cmapDepth')	display.cmapDepth=8;else	display.cmapDepth=cmapDepth;enddisplay.maxGunVal = 2^display.cmapDepth-1;display.numColors = 256;display.reservedColor(1).name='background';display.reservedColor(1).fbVal = 0;display.reservedColor(1).gunVal = [1 1 1]*floor(display.maxGunVal/2);display.reservedColor(2).name='black';display.reservedColor(2).fbVal = 1;display.reservedColor(2).gunVal = [0,0,0];display.reservedColor(3).name='white';display.reservedColor(3).fbVal = 2;display.reservedColor(3).gunVal = [1 1 1]*display.maxGunVal;if strcmp(card,'AV')	display.pixelDepth = 8;elseif strcmp(card,'BuiltIn8-bit')	display.pixelDepth = 8;elseif strcmp(card,'Radius10-bit')	% this is a misnomer- the pixelDepth field is actually	% used as a colorMap depth field. But, for backwards compatability,	% we'll leave it and just add a more appropriately-named field. (RFD)	display.pixelDepth = 10;	% cmapDepth field can be set to either 8 or 10 bits for the Radius.  If	% it is set to 10, then your stim code will need to use tenBit2eightBit	% to produce the appropriate gamma tables.endif strcmp(position,'room 454')	display.distance = 50;endif strcmp(monitor,'SanyoLCD')    disp('Check distance from projector to screen in initDisplayStruct.');	if strcmp(position,'outside bore')		display.distance = 127.5;		display.pixelSize = 0.0691;	elseif strcmp(position,'inside bore')		display.distance = 21.5;		display.pixelSize = 0.0825;	else		disp(['display position property "',position,'" not recognized for monitor "',monitor,'".']);	end	if strcmp(resolution,'640x480, 67Hz')		display.frameRate = 200/3;		else		disp(['display resolution property "',resolution,'" not recognized for monitor "',monitor,'".']);	endelseif strcmp(monitor,'Multiscan720') 	if strcmp(position,'room 452')		display.distance = 40;	else		disp(['display position property "',position,'" not recognized for monitor "',monitor,'".']);	end	if strcmp(resolution,'640x480, 60Hz')		display.pixelSize = 0.0450;		display.frameRate = 60;		elseif strcmp(resolution,'640x480, 67Hz')		display.pixelSize = 0.0450;		display.frameRate = 200/3;	elseif strcmp(resolution,'800x600, 60Hz')		display.pixelSize = 0.03750;		display.frameRate = 60;	elseif strcmp(resolution,'832x624, 75Hz')		display.pixelSize = 0.03620;		display.frameRate = 75;	elseif strcmp(monitor,'Apple multiscan 720') & strcmp(resolution,'1024x768, 60Hz')		display.pixelSize = 0.02880;		display.frameRate = 60;	elseif strcmp(resolution,'1024x768, 75Hz')		display.pixelSize = 0.02880;		display.frameRate = 75;	else		disp(['display resolution property "',resolution,'" not recognized for monitor "',monitor,'".']);	endelseif strcmp(monitor,'HP')	if strcmp(position,'room 485')		display.distance = 45;	%53.1	end	if strcmp(resolution,'1024x768, 75Hz')		display.pixelSize = 0.03776;			% THIS HAS BEEN FIXED		display.frameRate = 75;	else		disp(['display resolution property "',resolution,'" not recognized for monitor "',monitor,'".']);	endelseif strcmp(monitor,'ViewSonic') 	if strcmp(position,'room 485')		display.distance = 20;	else		disp(['display position property "',position,'" not recognized for monitor "',monitor,'".']);	end	if strcmp(resolution,'640x480, 67Hz')		display.pixelSize = 0.0303;		display.frameRate = 200/3;	elseif strcmp(resolution,'1024x768, 75Hz')		display.pixelSize = 0.0152;		display.frameRate = 75;	else		disp(['display resolution property "',resolution,'" not recognized for monitor "',monitor,'".']);	endelseif strcmp(monitor,'RadiusGrayscale') % Radius Two-Page Display	if strcmp(position,'room 454')		display.distance = 50;	end		if strcmp(resolution,'1152x870, 75Hz')		display.pixelSize = 0.030;		display.frameRate = 75;	else		disp(['display resolution property "',resolution,'" not recognized for monitor "',monitor,'".']);	endelseif strcmp(monitor,'NecLcd2000')   %NEC Multisync LCD 2000	if strcmp(position,'room 452')		display.distance = 50;	%53.1	elseif  strcmp(position,'shielded box')		% display.distance = 67.5;      %centimeters , Measured 02.18.98 by HAB		display.distance = 50;      %centimeters, after moving monitor to front of box; 									% Measured ~ 04.07.98 by Alex Huk?  53.1	end		if strcmp(resolution,'640x480, 67Hz')		display.pixelSize = 0.0626;		display.frameRate = 200/3;	elseif strcmp(resolution,'832x624, 75Hz')		display.pixelSize =0.048125;		display.frameRate = 75;	elseif strcmp(resolution,'1024x768, 75Hz')		display.pixelSize = 0.03875;		display.frameRate = 75;	elseif strcmp(resolution,'1280x1024, 74Hz')		display.pixelSize = 0.03125;		display.frameRate = 74;	elseif strcmp(resolution,'1360x1024, 75Hz')		display.pixelSize = 0.028750;		display.frameRate = 75;	else		disp(['display resolution property "',resolution,'" not recognized for monitor "',monitor,'".']);	endelse 	disp(['display monitor property "',monitor,'" not recognized']);end% Replace the default distance with the distance from argument list, if any.if exist('distance')	display.distance = distance;end%set display.midDac and display.stepDacdisplay.stepDac = 2^(display.pixelDepth)/display.numColors;  %1 for 8-bit, 4 for 10-bit cardsdisplay.midDac = 2^(display.pixelDepth-1);                   %128 for 8-bit, 512 for 10-bit cards%The old way:%display.maxContrast = 1.0;%display.maxIntensity = 1.0;%load the appropriate gamma table.gammaFilename = [monitor,card];spectraFilename = [monitor,'Spectra'];homedr= pwd;chdir([machineName,':Applications:Matlab 5.2:MRI:GammaTables']);% Load gamma tablesif exist([gammaFilename,'.mat']) == 2	evalstr = (['load ',gammaFilename]);	eval(evalstr);	if ~exist('gammaTable')		gammaTable = gamma10 * 1023;	end	display.gammaTable = gammaTable;	disp(['loaded gamma table ',gammaFilename]);else	%Stick in linear gamma table.	display.gammaTable = linspace(0,2^display.pixelDepth-1,2^display.pixelDepth)';	disp(['Gamma table "',gammaFilename,'" not found.  Using linear gamma table instead.']);	pause(1);end% Load spectral characteristics for monitorif exist([spectraFilename,'.mat']) == 2	evalstr = (['load ',spectraFilename]);	eval(evalstr);	if ~exist('monitorSpectra')		disp('Spectra not loaded (only important for LMS-specified stimuli)');	else		display.spectra = monitorSpectra(:,1:3);	endelse	disp(['Spectra table ',spectraFilename,' not found (only important for LMS-specified stimuli)']);endchdir(homedr);